{"version":3,"sources":["App.js","index.js"],"names":["App","state","markdown","this","setState","event","target","value","marked","setOptions","breaks","className","onChange","handleChange","bind","id","dangerouslySetInnerHTML","__html","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0QA6CeA,E,2MAxCbC,MAAQ,CACNC,SAAU,I,mFAKVC,KAAKC,SAAS,CACZF,SAFA,m4B,mCAKSG,GACXF,KAAKC,SAAS,CACZF,SAAUG,EAAMC,OAAOC,U,+BASzB,OAJAC,IAAOC,WAAW,CAChBC,QAAQ,IAIR,yBAAKC,UAAU,OACb,wBAAIA,UAAU,SAAd,2BACA,8BACEC,SAAUT,KAAKU,aAAaC,KAAKX,MACjCY,GAAG,SACHJ,UAAU,SACVJ,MAAOJ,KAAKF,MAAMC,WAEpB,yBACEa,GAAG,UACHJ,UAAU,UACVK,wBAAyB,CAAEC,OAAQT,IAAOL,KAAKF,MAAMC,kB,GAlC7CgB,IAAMC,WCCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a0b60afb.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.scss\";\nimport marked from \"marked\";\nclass App extends React.Component {\n  state = {\n    markdown: \"\"\n  };\n  componentDidMount() {\n    const INITIAL_MARKDOWN =\n      \"# Markdown Text goes here\\n## You can also make subheadings\\n\\nOne of the **trickiest** parts of getting this project to work was learning how to use `dangerouslySetInnerHTML` to make the previewer display the output of [marked.js](https://github.com/markedjs/marked/blob/master/README.md) as HTML instead of a string.\\n\\nAccording to the React Documentation,\\n>dangerouslySetInnerHTML is React’s replacement for using innerHTML in the browser DOM. In general, setting HTML from code is risky because it’s easy to inadvertently expose your users to a cross-site scripting (XSS) attack.\\n\\nExample Code:\\n```\\nfunction createMarkup() {\\n  return {__html: 'First &middot; Second'};\\n}\\n\\nfunction MyComponent() {\\n  return <div dangerouslySetInnerHTML={createMarkup()} />;\\n}\\n```\\n\\nJust remember to:\\n- Search, Read, Ask\\n- Ask for help on the Forum (that's what worked for me.)\\n\\n\";\n    this.setState({\n      markdown: INITIAL_MARKDOWN\n    });\n  }\n  handleChange(event) {\n    this.setState({\n      markdown: event.target.value\n    });\n  }\n  render() {\n    // ALLOWS LINE BREAKS WITH RETURN BUTTON\n    marked.setOptions({\n      breaks: true\n    });\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Markdown Text Previewer</h1>\n        <textarea\n          onChange={this.handleChange.bind(this)}\n          id=\"editor\"\n          className=\"editor\"\n          value={this.state.markdown}\n        ></textarea>\n        <div\n          id=\"preview\"\n          className=\"preview\"\n          dangerouslySetInnerHTML={{ __html: marked(this.state.markdown) }}\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}